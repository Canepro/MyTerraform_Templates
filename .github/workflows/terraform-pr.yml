name: Terraform PR Validation

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'modules/**'
      - 'stacks/**'
      - '.github/workflows/terraform-*.yml'

permissions:
  contents: read
  pull-requests: write

jobs:
  detect-changes:
    name: Detect Changed Stacks
    runs-on: ubuntu-latest
    outputs:
      stacks: ${{ steps.detect.outputs.stacks }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed stacks
        id: detect
        run: |
          # Get changed files
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD)
          
          # Find unique stack directories
          STACKS=$(echo "$CHANGED_FILES" | grep -E '^stacks/' | cut -d'/' -f1-4 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          
          # If no stacks changed but modules changed, validate all stacks
          if [ "$STACKS" == "[]" ] && echo "$CHANGED_FILES" | grep -q '^modules/'; then
            STACKS=$(find stacks -name '*.tf' -not -path '*/\.*' | xargs -I {} dirname {} | sort -u | jq -R -s -c 'split("\n")[:-1]')
          fi
          
          echo "stacks=$STACKS" >> $GITHUB_OUTPUT
          echo "Changed stacks: $STACKS"

  terraform-validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.stacks != '[]'
    strategy:
      matrix:
        stack: ${{ fromJson(needs.detect-changes.outputs.stacks) }}
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        working-directory: ${{ matrix.stack }}
        run: terraform init -backend=false

      - name: Terraform Validate
        id: validate
        working-directory: ${{ matrix.stack }}
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        working-directory: ${{ matrix.stack }}
        run: terraform plan -no-color -input=false
        continue-on-error: true
        env:
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

      - name: Comment PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Validation Results for \`${{ matrix.stack }}\`
            
            | Check | Status |
            |-------|--------|
            | üñå Format | \`${{ steps.fmt.outcome }}\` |
            | ‚öôÔ∏è Initialization | \`${{ steps.init.outcome }}\` |
            | ü§ñ Validation | \`${{ steps.validate.outcome }}\` |
            | üìñ Plan | \`${{ steps.plan.outcome }}\` |
            
            <details><summary>Show Plan Output</summary>
            
            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Fail if validation failed
        if: steps.fmt.outcome == 'failure' || steps.validate.outcome == 'failure'
        run: exit 1

  module-validation:
    name: Validate Modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ~1.5

      - name: Format Check
        run: terraform fmt -check -recursive

      - name: Validate all modules
        run: |
          for module in $(find modules -name '*.tf' -not -path '*/\.*' | xargs -I {} dirname {} | sort -u); do
            echo "Validating module: $module"
            cd "$module"
            terraform init -backend=false
            terraform validate
            cd - > /dev/null
          done

